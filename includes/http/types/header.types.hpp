/**
 * @file header.types.hpp
 * @author Rolland Goodenough (goodenoughr@gmail.com)
 * @date 2023-03-24
 * 
 * @copyright Copyright 2023 Rolland Goodenough
 * 
 * This file is part of simpleHTTP which is released under the MIT License
 * See file LICENSE for the full License
 */

#ifndef SIMPLE_HTPP_HEADER_TYPES
#define SIMPLE_HTPP_HEADER_TYPES

#include <map>
#include <string>

#include "logging/logging.hpp"

namespace simple::http {
enum class Header {
  A_IM,
  ACCEPT,
  ACCEPT_CHARSET,
  ACCEPT_ENCODING,
  ACCEPT_LANGUAGE,
  ACCEPT_DATETIME,
  ACCESS_CONTROL_REQUEST_METHOD,
  ACCESS_CONTROL_REQUEST_HEADERS,
  AUTHORIZATION,
  CACHE_CONTROL,
  CONNECTION,
  CONTENT_LENGTH,
  CONTENT_TYPE,
  COOKIE,
  DATE,
  EXPECT,
  FORWARDED,
  FROM,
  HOST,
  IF_MATCH,
  IF_MODIFIED_SINCE,
  IF_NONE_MATCH,
  IF_RANGE,
  IF_UNMODIFIED_SINCE,
  MAX_FORWARDS,
  ORIGIN,
  PRAGMA,
  PROXY_AUTHORIZATION,
  RANGE,
  REFERER,
  TE,
  USER_AGENT,
  UPGRADE,
  VIA,
  WARNING,
  ACCEPT_CH,
  ACCESS_CONTROL_ALLOW_ORIGIN,
  ACCESS_CONTROL_ALLOW_CREDENTIALS,
  ACCESS_CONTROL_EXPOSE_HEADERS,
  ACCESS_CONTROL_MAX_AGE,
  ACCESS_CONTROL_ALLOW_METHODS,
  ACCESS_CONTROL_ALLOW_HEADERS,
  ACCEPT_PATCH,
  ACCEPT_RANGES,
  AGE,
  ALLOW,
  ALT_SVC,
  CONTENT_DISPOSITION,
  CONTENT_ENCODING,
  CONTENT_LANGUAGE,
  CONTENT_LOCATION,
  CONTENT_MD5,
  CONTENT_RANGE,
  DELTA_BASE,
  ETAG,
  EXPIRES,
  IM,
  LAST,
  LINK,
  P3P,
  PREFERENCE_APPLIED,
  PROXY_AUTHENTICATE,
  PUBLIC_KEY_PINS,
  RETRY_AFTER,
  SERVER,
  SET_COOKIE,
  STRICT_TRANSPORT_SECURITY,
  TRAILER,
  TRANSFER_ENCODING,
  TK,
  VARY,
  WWW_AUTHENTICATE,
  X_FRAME_OPTIONS,
  UKNOWN,
};

inline auto to_header_str(Header hdr) -> const std::string& {
  static const std::map<Header, std::string> HEADER_STRS{
      {Header::A_IM, "A-IM"},
      {Header::ACCEPT, "Accept"},
      {Header::ACCEPT_CHARSET, "Accept-Charset"},
      {Header::ACCEPT_ENCODING, "Accept-Encoding"},
      {Header::ACCEPT_LANGUAGE, "Accept-Language"},
      {Header::ACCEPT_DATETIME, "Accept-Datetime"},
      {Header::ACCESS_CONTROL_REQUEST_METHOD, "Access-Control-Request-Method"},
      {Header::ACCESS_CONTROL_REQUEST_HEADERS, "Access-Control-Request-Headers"},
      {Header::AUTHORIZATION, "Authorization"},
      {Header::CACHE_CONTROL, "Cache-Control"},
      {Header::CONNECTION, "Connection"},
      {Header::CONTENT_LENGTH, "Content-Length"},
      {Header::CONTENT_TYPE, "Content-Type"},
      {Header::COOKIE, "Cookie"},
      {Header::DATE, "Date"},
      {Header::EXPECT, "Expect"},
      {Header::FORWARDED, "Forwarded"},
      {Header::FROM, "From"},
      {Header::HOST, "Host"},
      {Header::IF_MATCH, "If-Match"},
      {Header::IF_MODIFIED_SINCE, "If-Modified-Since"},
      {Header::IF_NONE_MATCH, "If-None-Match"},
      {Header::IF_RANGE, "If-Range"},
      {Header::IF_UNMODIFIED_SINCE, "If-Unmodified-Since"},
      {Header::MAX_FORWARDS, "Max-Forwards"},
      {Header::ORIGIN, "Origin"},
      {Header::PRAGMA, "Pragma"},
      {Header::PROXY_AUTHORIZATION, "Proxy-Authorization"},
      {Header::RANGE, "Range"},
      {Header::REFERER, "Referer"},
      {Header::TE, "TE"},
      {Header::USER_AGENT, "User-Agent"},
      {Header::UPGRADE, "Upgrade"},
      {Header::VIA, "Via"},
      {Header::WARNING, "Warning"},
      {Header::ACCEPT_CH, "Accept-Ch"},
      {Header::ACCESS_CONTROL_ALLOW_ORIGIN, "Access-Control-Allow-Origin"},
      {Header::ACCESS_CONTROL_ALLOW_CREDENTIALS, "Access-Control-Allow-Credentials"},
      {Header::ACCESS_CONTROL_EXPOSE_HEADERS, "Access-Control-Expose-Headers"},
      {Header::ACCESS_CONTROL_MAX_AGE, "Access-Control-Max-Age"},
      {Header::ACCESS_CONTROL_ALLOW_METHODS, "Access-Control-Allow-Methods"},
      {Header::ACCESS_CONTROL_ALLOW_HEADERS, "Access-Control-Allow-Headers"},
      {Header::ACCEPT_PATCH, "Accept-Patch"},
      {Header::ACCEPT_RANGES, "Accept-Ranges"},
      {Header::AGE, "Age"},
      {Header::ALLOW, "Allow"},
      {Header::ALT_SVC, "Alt-Svc"},
      {Header::CONTENT_DISPOSITION, "Content-Disposition"},
      {Header::CONTENT_ENCODING, "Content-Encoding"},
      {Header::CONTENT_LANGUAGE, "Content-Language"},
      {Header::CONTENT_LOCATION, "Content-Location"},
      {Header::CONTENT_MD5, "Content-Md5"},
      {Header::CONTENT_RANGE, "Content-Range"},
      {Header::DELTA_BASE, "Delta-Base"},
      {Header::ETAG, "Etag"},
      {Header::EXPIRES, "Expires"},
      {Header::IM, "Im"},
      {Header::LAST, "Last"},
      {Header::LINK, "Link"},
      {Header::P3P, "P3p"},
      {Header::PREFERENCE_APPLIED, "Preference-Applied"},
      {Header::PROXY_AUTHENTICATE, "Proxy-Authenticate"},
      {Header::PUBLIC_KEY_PINS, "Public-Key-Pins"},
      {Header::RETRY_AFTER, "Retry-After"},
      {Header::SERVER, "Server"},
      {Header::SET_COOKIE, "Set-Cookie"},
      {Header::STRICT_TRANSPORT_SECURITY, "Strict-Transport-Security"},
      {Header::TRAILER, "Trailer"},
      {Header::TRANSFER_ENCODING, "Transfer-Encoding"},
      {Header::TK, "Tk"},
      {Header::VARY, "Vary"},
      {Header::WWW_AUTHENTICATE, "WWW-Authenticate"},
      {Header::X_FRAME_OPTIONS, "X-Frame-Options"},
  };
  return HEADER_STRS.at(hdr);
}

inline auto header_from_str(std::string_view hdr) -> Header {
  static const std::map<std::string, Header, std::less<>> HEADER_STRS{
      {"A-IM", Header::A_IM},
      {"Accept", Header::ACCEPT},
      {"Accept-Charset", Header::ACCEPT_CHARSET},
      {"Accept-Encoding", Header::ACCEPT_ENCODING},
      {"Accept-Language", Header::ACCEPT_LANGUAGE},
      {"Accept-Datetime", Header::ACCEPT_DATETIME},
      {"Access-Control-Request-Method", Header::ACCESS_CONTROL_REQUEST_METHOD},
      {"Access-Control-Request-Headers", Header::ACCESS_CONTROL_REQUEST_HEADERS},
      {"Authorization", Header::AUTHORIZATION},
      {"Cache-Control", Header::CACHE_CONTROL},
      {"Connection", Header::CONNECTION},
      {"Content-Length", Header::CONTENT_LENGTH},
      {"Content-Type", Header::CONTENT_TYPE},
      {"Cookie", Header::COOKIE},
      {"Date", Header::DATE},
      {"Expect", Header::EXPECT},
      {"Forwarded", Header::FORWARDED},
      {"From", Header::FROM},
      {"Host", Header::HOST},
      {"If-Match", Header::IF_MATCH},
      {"If-Modified-Since", Header::IF_MODIFIED_SINCE},
      {"If-None-Match", Header::IF_NONE_MATCH},
      {"If-Range", Header::IF_RANGE},
      {"If-Unmodified-Since", Header::IF_UNMODIFIED_SINCE},
      {"Max-Forwards", Header::MAX_FORWARDS},
      {"Origin", Header::ORIGIN},
      {"Pragma", Header::PRAGMA},
      {"Proxy-Authorization", Header::PROXY_AUTHORIZATION},
      {"Range", Header::RANGE},
      {"Referer", Header::REFERER},
      {"TE", Header::TE},
      {"User-Agent", Header::USER_AGENT},
      {"Upgrade", Header::UPGRADE},
      {"Via", Header::VIA},
      {"Warning", Header::WARNING},
      {"Accept-Ch", Header::ACCEPT_CH},
      {"Access-Control-Allow-Origin", Header::ACCESS_CONTROL_ALLOW_ORIGIN},
      {"Access-Control-Allow-Credentials", Header::ACCESS_CONTROL_ALLOW_CREDENTIALS},
      {"Access-Control-Expose-Headers", Header::ACCESS_CONTROL_EXPOSE_HEADERS},
      {"Access-Control-Max-Age", Header::ACCESS_CONTROL_MAX_AGE},
      {"Access-Control-Allow-Methods", Header::ACCESS_CONTROL_ALLOW_METHODS},
      {"Access-Control-Allow-Headers", Header::ACCESS_CONTROL_ALLOW_HEADERS},
      {"Accept-Patch", Header::ACCEPT_PATCH},
      {"Accept-Ranges", Header::ACCEPT_RANGES},
      {"Age", Header::AGE},
      {"Allow", Header::ALLOW},
      {"Alt-Svc", Header::ALT_SVC},
      {"Content-Disposition", Header::CONTENT_DISPOSITION},
      {"Content-Encoding", Header::CONTENT_ENCODING},
      {"Content-Language", Header::CONTENT_LANGUAGE},
      {"Content-Location", Header::CONTENT_LOCATION},
      {"Content-Md5", Header::CONTENT_MD5},
      {"Content-Range", Header::CONTENT_RANGE},
      {"Delta-Base", Header::DELTA_BASE},
      {"Etag", Header::ETAG},
      {"Expires", Header::EXPIRES},
      {"Im", Header::IM},
      {"Last", Header::LAST},
      {"Link", Header::LINK},
      {"P3p", Header::P3P},
      {"Preference-Applied", Header::PREFERENCE_APPLIED},
      {"Proxy-Authenticate", Header::PROXY_AUTHENTICATE},
      {"Public-Key-Pins", Header::PUBLIC_KEY_PINS},
      {"Retry-After", Header::RETRY_AFTER},
      {"Server", Header::SERVER},
      {"Set-Cookie", Header::SET_COOKIE},
      {"Strict-Transport-Security", Header::STRICT_TRANSPORT_SECURITY},
      {"Trailer", Header::TRAILER},
      {"Transfer-Encoding", Header::TRANSFER_ENCODING},
      {"Tk", Header::TK},
      {"Vary", Header::VARY},
      {"WWW-Authenticate", Header::WWW_AUTHENTICATE},
      {"X-Frame-Options", Header::X_FRAME_OPTIONS},
  };
  auto iter = HEADER_STRS.find(hdr);
  if (iter == HEADER_STRS.end()) {
    warn("Unknown Header: " + std::string(hdr));
    return Header::UKNOWN;
  }

  return iter->second;
}

}  // namespace simple::http

#endif
